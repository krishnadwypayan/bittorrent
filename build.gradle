plugins {
    id("java")
    id 'jacoco'
    id("io.micronaut.application") version "4.4.4"
}

micronaut {
    version("4.6.3")
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.krishna.kota.*")
    }
}

version = "0.1"
group = "com.krishna.kota"
description = "BitTorrent client implementation"

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

jacoco {
    toolVersion = "0.8.12"
}

test {
    useJUnitPlatform()
}

// Centralized configuration for all projects
allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    
    repositories {
        mavenCentral()
    }
    
    // Configure JaCoCo for all projects
    jacoco {
        toolVersion = "0.8.12"
    }
    
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
    
    jacocoTestReport {
        dependsOn test
        reports {
            xml.required.set(true)
            csv.required.set(false)
            html.required.set(true)
        }
    }
    
    // Shared logging configuration setup
    task copySharedLoggingConfig(type: Copy) {
        from "${rootProject.projectDir}/config/log4j2.xml"
        into "${project.buildDir}/resources/main"
        
        // Ensure the destination directory exists
        doFirst {
            file("${project.buildDir}/resources/main").mkdirs()
        }
    }
    
    // Task to copy shared log4j2.xml to test resources as well
    task copySharedLoggingConfigTest(type: Copy) {
        from "${rootProject.projectDir}/config/log4j2.xml"
        into "${project.buildDir}/resources/test"
        
        // Ensure the destination directory exists
        doFirst {
            file("${project.buildDir}/resources/test").mkdirs()
        }
    }
    
    // Make the copy tasks run automatically during build
    tasks.named('processResources') {
        dependsOn copySharedLoggingConfig
    }
    
    tasks.named('processTestResources') {
        dependsOn copySharedLoggingConfigTest
    }
    
    // Also ensure the tasks run before compilation
    tasks.named('compileJava') {
        dependsOn copySharedLoggingConfig
    }
    
    tasks.named('compileTestJava') {
        dependsOn copySharedLoggingConfigTest
    }
    
    dependencies {
        // Micronaut BOM for version management
        implementation platform("io.micronaut.platform:micronaut-platform:4.6.3")
        
        // Micronaut Core dependencies
        implementation("io.micronaut:micronaut-inject")
        implementation("io.micronaut:micronaut-runtime")
        
        // YAML support for application.yml configuration
        runtimeOnly("org.yaml:snakeyaml")
        
        // Jakarta Inject API for dependency injection annotations (@Singleton, @Inject)
        implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
        
        // SLF4J API for logging
        implementation 'org.slf4j:slf4j-api:2.0.16'
        
        // Annotation processors
        annotationProcessor("io.micronaut:micronaut-inject-java:4.6.3")
        
        // Test dependencies
        testImplementation("io.micronaut.test:micronaut-test-junit5")
        testImplementation 'org.mockito:mockito-core:5.14.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.3'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.3'
        testAnnotationProcessor("io.micronaut:micronaut-inject-java:4.6.3")
    }
}


tasks.named("jacocoTestReport", JacocoReport) {
    // The report is generated after the tests have run
    dependsOn(tasks.named("test", Test))

    reports {
        xml.required.set(true)  // For CI/CD systems like SonarQube
        csv.required.set(false)
        html.required.set(true) // For human-readable reports
    }

    // This is the most important part: specifying what to include and exclude
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                // Exclude the main application class, as it's usually just a bootstrap
                '**/Application.class',
                // Exclude Micronaut's generated bean definitions and interceptors
                '**/*$Definition.class',
                '**/*$Intercepted.class',
                // Exclude Micronaut AOT generated code
                '**/aot/**'
        ])
    }))
}

tasks.named("jacocoTestCoverageVerification", JacocoCoverageVerification) {
    // CRITICAL: The verification task must run AFTER the report is generated
    // It uses the execution data from the test task.
    dependsOn(tasks.named("jacocoTestReport"))

    violationRules {
        rule {
            // This rule applies to the whole project bundle
            limit {
                // Use a decimal for clarity (e.g., 0.90 for 90%)
                minimum = 0.90
            }
        }
        rule {
            element = 'CLASS'
            // You can exclude multiple classes
            excludes = [
                    'example.micronaut.Application',
                    // Also exclude Micronaut generated classes from class-level rules
                    '**.*$Definition',
                    '**.*$Intercepted'
            ]
            limit {
                minimum = 0.90
            }
        }
    }
}

tasks.named("check") {
    dependsOn(tasks.named("jacocoTestReport"))
}



